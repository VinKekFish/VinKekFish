<?xml version="1.0"?>
<doc>
    <assembly>
        <name>bytesbuilder</name>
    </assembly>
    <members>
        <member name="M:cryptoprime.BitToBytes.getBit(System.Byte[],System.IntPtr)">
            <summary>Получить бит из битово массива</summary>
            <param name="array">Массив битов</param><param name="index">Индекс получаемого элемента</param>
        </member>
        <member name="M:cryptoprime.BitToBytes.getBit(System.Byte*,System.IntPtr)">
            <summary>Получить бит из битово массива</summary>
            <param name="array">Массив битов</param><param name="index">Индекс получаемого элемента</param>
        </member>
        <member name="M:cryptoprime.BitToBytes.setBit(System.Byte[],System.IntPtr)">
            <summary>Установить бит в битовом массиве</summary>
            <param name="array">Массив битов</param><param name="index">Индекс задаваемого элемента</param>
        </member>
        <member name="M:cryptoprime.BitToBytes.setBit(System.Byte*,System.IntPtr)">
            <summary>Установить бит в битовом массиве</summary>
            <param name="array">Массив битов</param><param name="index">Индекс задаваемого элемента</param>
        </member>
        <member name="M:cryptoprime.BitToBytes.resetBit(System.Byte[],System.IntPtr)">
            <summary>Сбросить бит в битовом массиве</summary>
            <param name="array">Массив битов</param><param name="index">Индекс задаваемого элемента</param>
        </member>
        <member name="M:cryptoprime.BitToBytes.resetBit(System.Byte*,System.IntPtr)">
            <summary>Сбросить бит в битовом массиве</summary>
            <param name="array">Массив битов</param><param name="index">Индекс задаваемого элемента</param>
        </member>
        <member name="T:cryptoprime.BytesBuilder">
            <summary>
            BytesBuilder
            Класс позволяет собирать большой блок байтов из более мелких
            Класс непотокобезопасный (при его использовании необходимо синхронизировать доступ к классу вручную)
            </summary>
        </member>
        <member name="F:cryptoprime.BytesBuilder.bytes">
            <summary>Добавленные блоки байтов</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilder.Count">
            <summary>Количество всех сохранённых байтов в этом объекте</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilder.countOfBlocks">
            <summary>Количество всех сохранённых блоков, как они были добавлены в этот объект</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.getBlock(System.Int32)">
            <summary>Получает сохранённых блок с определённым индексом в списке сохранения</summary><param name="number">Индекс в списке</param><returns>Сохранённый блок (не копия, подлинник)</returns>
        </member>
        <member name="F:cryptoprime.BytesBuilder.count">
            <summary>Количество сохранённых байтов</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.add(System.Byte[],System.Int32,System.Boolean)">
            <summary>Добавляет блок в объект</summary><param name="bytesToAdded">Добавляемый блок данных</param>
            <param name="index">Куда добавляется блок. По-умолчанию, в конец (index = -1)</param>
            <param name="MakeCopy">MakeCopy = true говорит о том, что данные блока будут скопированы (создан новый блок и он будет добавлен). По-умолчанию false - блок будет добавлен без копирования. Это значит, что при изменении исходного блока, изменится и выход, даваемый объектом. Если исходный блок будет обнулён, то будет обнулены и выходные байты из этого объекта, соответствующие этому блоку</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addCopy(System.Byte[],System.Int32)">
            <summary>Копирует данные блока и добавляет его в объект</summary><param name="bytesToAdded">Добавляемый блок</param><param name="index">Индекс для добавления.  index = -1 - добавление в конец</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addByte(System.Byte,System.Int32)">
            <summary>Добавляет в объект один байт</summary><param name="number">Добавляемое значение</param><param name="index">Индекс добавляемого блока. -1 - в конец</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addUshort(System.UInt16,System.Int32)">
            <summary>Добавляет в объект двухбайтовое беззнаковое целое. Младший байт по младшему адресу</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addInt(System.Int32,System.Int32)">
            <summary>Добавляет в объект 4-хбайтовое беззнаковое целое. Младший байт по младшему адресу</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addULong(System.UInt64,System.Int32)">
            <summary>Добавляет в объект 8-хбайтовое беззнаковое целое. Младший байт по младшему адресу</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.addVariableULong(System.UInt64,System.Int32)">
            <summary>Добавляет в объект специальную кодировку 8-байтового числа, см. функцию VariableULongToBytes</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.add(System.String,System.Int32)">
            <summary>Добавляет в объект строку UTF-8</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilder.Clear(System.Boolean)">
            <summary>Обнуляет объект</summary>
            <param name="fast">fast = <see langword="false"/> - обнуляет все байты сохранённые в массиве</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.getBytes(System.IntPtr,System.Byte[])">
            <summary>Создаёт массив байтов, включающий в себя все сохранённые массивы</summary>
            <param name="resultCount">Размер массива-результата (если нужны все байты resultCount = -1)</param>
            <param name="resultA">Массив, в который будет записан результат. Если resultA = null, то массив создаётся</param>
            <returns></returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.getBytes(System.IntPtr,System.IntPtr,System.Byte[],System.Int32)">
            <summary>Получить resultCount начиная с индекса index</summary>
            <param name="resultCount">Количество байтов для получения. -1 - сформировать массив с байта index до конца байтов источника</param>
            <param name="dIndex">Стартовый индекс байта источника</param>
            <param name="forResult">Массив для хранения результата</param>
            <param name="startIndex">Индекс, с которого заполняется массив forResult (индекс приёмника)</param>
            <returns>Массив результата длиной resultCount</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.RemoveBlockAt(System.Int32,System.Boolean)">
            <summary>Удаляет блок из объекта с позиции position, блок очищается нулями</summary>
            <returns>Возвращает длину удалённого блока</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.getBytesAndRemoveIt(System.Byte[],System.IntPtr)">
            <summary>Создаёт массив байтов, включающий в себя resultCount символов, и удаляет их с очисткой из BytesBuilder</summary>
            <param name="resultA">Массив, в который будет записан результат. Если resultA = null, то массив создаётся</param>
            <param name="resultCount">Размер массива-результата</param>
            <returns>Запрошенный результат (первые resultCount байтов)</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.CloneBytes(System.Byte[],System.IntPtr,System.IntPtr)">
            <summary>Клонирует массив, начиная с элемента start, до элемента с индексом PostEnd (не включая)</summary><param name="B">Массив для копирования</param>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Элемент, расположенный после последнего элемента для копирования. -1 - до конца</param>
            <returns>Новый массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.CloneBytes(System.Byte*,System.IntPtr,System.IntPtr)">
            <summary>Клонирует массив, начиная с элемента start, до элемента с индексом PostEnd (не включая)</summary><param name="b">Массив для копирования</param>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Элемент, расположенный после последнего элемента для копирования</param>
            <returns>Новый массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.CopyTo(System.Byte[],System.Byte[],System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Копирует массив source в массив target. Если запрошенное количество байт скопировать невозможно, копирует те, что возможно
            </summary>
            <param name="source">Источник копирования</param>
            <param name="target">Приёмник</param>
            <param name="targetIndex">Начальный индекс копирования в приёмник</param>
            <param name="count">Максимальное количество байт для копирования (если столько нет, копирует столько, сколько возможно) (-1 - все доступные)</param>
            <param name="index">Начальный индекс копирования из источника</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.CopyTo(System.IntPtr,System.IntPtr,System.Byte*,System.Byte*,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Копирует массивы по указателям из s в t</summary>
            <param name="sourceLength">Длина массива s</param><param name="targetLength">Длина массива t</param>
            <param name="s">Источник для копирования</param><param name="t">Приёмник для копирования</param>
            <param name="targetIndex">Начальный индекс, с которого будет происходить запись в t</param>
            <param name="count">Количество байтов для записи в t (если столько нет, копирует столько, сколько возможно). Count = -1 - копирует столько, сколько возможно, учитывая размеры источника и приёмника. count не может быть 0</param>
            <param name="index">Начальный индекс копирования из источника s</param>
            <returns>Количество скопированных байтов</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.FillByBytes(System.Byte,System.Byte[],System.IntPtr,System.IntPtr)">
            <summary>Заполняет массив t байтами со значением value</summary><param name="value">Значение для заполнения</param>
            <param name="t">Массив для заполнения</param><param name="index">Индекс первого элемента, с которого будет начато заполнение</param>
            <param name="count">Количество элементов для заполнения. count = -1 - заполнять до конца</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.FillByBytes(System.Byte,System.Byte*,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>Заполняет массив t байтами со значением value</summary><param name="value">Значение для заполнения</param>
            <param name="t">Массив для заполнения</param><param name="len">Длина массива</param><param name="index">Индекс первого элемента, с которого будет начато заполнение</param>
            <param name="count">Количество элементов для заполнения. count = -1 - заполнять до конца</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.ToNull(System.Byte[],System.UInt64,System.IntPtr,System.IntPtr)">
            <summary>Обнуляет массив байтов</summary>
            <param name="t">Массив для обнуления</param>
            <param name="val">Значение, которое задаётся массиву (последние 7-мь байтов массиву может задаваться значение младшего байта).
            Для примера, это может быть значение 0x3737_3737__3737_3737 (в x64 значение 0x37 - это invalide OpCode)
            Младший байт по младшему адресу</param>
            <param name="index">Индекс начального элемента для обнуления</param>
            <param name="count">Количество элементов для обнуления, -1 - обнулять до конца</param>
            <returns>Количество обнулённых байтов</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.ToNull(System.IntPtr,System.Byte*,System.UInt64,System.IntPtr,System.IntPtr)">
            <summary>Обнуляет массив байтов по указателю</summary>
            <param name="targetLength">Размер массива для обнуления</param>
            <param name="t">Массив для обнуления</param>
            <param name="val">Значение, которое задаётся массиву (последние 7-мь байтов массиву может задаваться значение младшего байта).
            Для примера, это может быть значение 0x3737_3737__3737_3737 (в x64 значение 0x37 - это invalide OpCode)</param>
            <param name="index">Индекс начального элемента для обнуления</param>
            <param name="count">Количество элементов для обнуления, -1 - обнулять до конца</param>
            <returns>Количество обнулённых байтов</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.UIntToBytes(System.UInt32,System.Byte[]@,System.IntPtr)">
            <summary>Преобразует 4-хбайтовое целое в 4 байта в target по индексу start</summary>
            <param name="data">4-х байтовое беззнаковое целое для преобразования. Младший байт по младшему адресу</param>
            <param name="target">Массив для записи, может быть null</param>
            <param name="start">Начальный индекс для записи числа</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.ULongToBytes(System.UInt64,System.Byte[]@,System.IntPtr)">
            <summary>Преобразует 8-хбайтовое целое в 8 байта в target по индексу start</summary>
            <param name="data">8-х байтовое беззнаковое целое для преобразования. Младший байт по младшему адресу</param>
            <param name="target">Массив для записи, может быть null</param>
            <param name="start">Начальный индекс для записи числа</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.ULongToBytes(System.UInt64,System.Byte*,System.IntPtr,System.IntPtr)">
            <summary>Преобразует 8-хбайтовое целое в 8 байта в target по индексу start</summary>
            <param name="data">8-х байтовое беззнаковое целое для преобразования. Младший байт по младшему адресу</param>
            <param name="target">Массив для записи</param>
            <param name="len">Длина массива target</param>
            <param name="start">Начальный индекс для записи числа</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.BytesToULong(System.UInt64@,System.Byte[],System.IntPtr)">
            <summary>Получает 8-мибайтовое целое число из массива. Младший байт по младшему индексу</summary>
            <param name="data">Полученное число</param>
            <param name="target">Массив с числом</param>
            <param name="start">Начальный элемент, по которому расположено число</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.BytesToULong(System.UInt64@,System.Byte*,System.IntPtr,System.IntPtr)">
            <summary>Получает 8-мибайтовое целое число из массива. Младший байт по младшему индексу</summary>
            <param name="data">Полученное число</param>
            <param name="target">Массив с числом</param>
            <param name="len">Длина массива target</param>
            <param name="start">Начальный элемент, по которому расположено число</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.BytesToUInt(System.UInt32@,System.Byte[],System.IntPtr)">
            <summary>Получает 4-хбайтовое целое число из массива. Младший байт по младшему индексу</summary>
            <param name="data">Полученное число</param>
            <param name="target">Массив с числом</param>
            <param name="start">Начальный элемент, по которому расположено число</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.BytesToVariableULong(System.UInt64@,System.Byte[],System.IntPtr)">
            <summary>Считывает из массива специальную сжатую кодировку числа. Младший байт по младшему индексу</summary>
            <param name="data">Считанне число</param>
            <param name="target">Массив</param>
            <param name="start">Стартовый индекс, по которому расположено число</param>
            <returns>Количество байтов, которое было считано (размер кодированного числа)</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.VariableULongToBytes(System.UInt64,System.Byte[]@,System.IntPtr)">
            <summary>Записывает в массив специальную сжатую кодировку числа</summary>
            <param name="data">Число для записи</param>
            <param name="target">Массив для записи</param>
            <param name="start">Индекс в массиве для записи туда числа</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.UnsecureCompare(System.IntPtr,System.IntPtr,System.Byte*,System.Byte*,System.IntPtr,System.IntPtr)">
            <summary>Сравнивает два массива. Тайминг-небезопасный метод</summary>
            <param name="wellLen">Длина первого массива</param>
            <param name="hashLen">Длина второго массива</param>
            <param name="wellHash">Первый массив</param>
            <param name="hash">Второй массив</param>
            <param name="count">Количество элементов для сравнения</param>
            <param name="indexWell">Начальный индекс для сравнения в массиве wellHash</param>
            <returns><see langword="true"/> - если массивы совпадают</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.UnsecureCompare(System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>Сравнивает два массива. Тайминг-небезопасный метод</summary>
            <param name="wellHash">Первый массив</param>
            <param name="hash">Второй массив</param>
            <param name="count">Количество элементов для сравнения</param>
            <param name="indexWell">Начальный индекс для сравнения в массиве wellHash</param>
            <returns><see langword="true"/> - если массивы совпадают</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.UnsecureCompare(System.Byte[],System.Byte[],System.IntPtr@)">
            <summary>Сравнивает два массива. Тайминг-небезопасный метод</summary>
            <param name="wellHash">Первый массив для сравнения</param>
            <param name="hash">Второй массив для сравнения</param>
            <param name="i">Индекс эленемта, который не совпадает</param>
            <returns><see langword="true"/> - если массивы совпадают</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilder.ClearString(System.String)">
            <summary>Попытка обнулить char-строку</summary>
            <param name="resultText">Строка для обнуления. Осторожно, resultText.substring(0) может возвращать указатель на ту же строку, т.к. .NET считает строки неизменяемыми</param>
        </member>
        <member name="M:cryptoprime.BytesBuilder.System#IDisposable#Dispose">
            <summary>Удаляет объект, вызывая Clear</summary>
        </member>
        <member name="T:cryptoprime.BytesBuilderForPointers">
            <summary>
            BytesBuilderForPointers
            Класс позволяет собирать большой блок байтов из более мелких
            Класс непотокобезопасный (при его использовании необходимо синхронизировать доступ к классу вручную)
            </summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.bytes">
            <summary>Добавленные блоки байтов</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderForPointers.Count">
            <summary>Количество всех сохранённых байтов в этом объекте</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderForPointers.countOfBlocks">
            <summary>Количество всех сохранённых блоков, как они были добавлены в этот объект</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.getBlock(System.Int32)">
            <summary>Получает сохранённых блок с определённым индексом в списке сохранения</summary><param name="number">Индекс в списке</param><returns>Сохранённый блок (не копия, подлинник!). Изменение блока повлияет на содержимое данного объекта</returns>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.count">
            <summary>Количество сохранённых байтов</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.addWithCopy(System.Byte*,System.IntPtr,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Int32)">
            <summary>Добавляет копию блока данных в объект</summary><param name="bytesToAdded">Исходный блок данных для добавления</param>
            <param name="len">Длина добавляемого массива</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования</param>
            <param name="index">Индекс, куда добавляется блок. По-умолчанию, в конец (index = -1)</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.addWithCopy(cryptoprime.BytesBuilderForPointers.Record,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Int32)">
            <summary>Добавляет копию блока данных в объект</summary><param name="bytesToAdded">Исходный блок данных для добавления</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования</param>
            <param name="index">Индекс, куда добавляется блок. По-умолчанию, в конец (index = -1)</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.addWithoutCopy(System.Byte*@,System.IntPtr,System.Int32)">
            <summary>Добавляет блок данных без копирования в объект</summary><param name="bytesToAdded">Добавляемый блок данных, указатель перезаписывается нулём с целью избежания ошибочного использования. <para>Обратите внимание, что при изменении из-вне блока данных могут измениться данные и внутри объекта</para><para>При удалении блока данных в этом буфере исходные данные будут перезатёрты нулями!</para></param>
            <param name="len">Длина добавляемого массива</param>
            <param name="index">Куда добавляется блок. По-умолчанию, в конец (index = -1)</param>
            <remarks>Обратите внимание, массив bytesToAdded лучше после этого нигде не использовать. Так как после удаления его из буфера, он будет автоматически перезаписан нулями. Необходима доп. проверка на то, что вызывающая функция нигде не использует данный объект</remarks>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.add(cryptoprime.BytesBuilderForPointers.Record,System.Int32)">
            <summary>Добавляет массив в сохранённые значения без копирования. Массив будет автоматически очищен и освобождён после окончания</summary>
            <param name="rec">Добавляемый массив (не копируется, будет уничтожен автоматически при очистке BytesBuilder). Массив нельзя использовать где-то ещё, так как он может быть неожиданно очищен</param>
            <param name="index">Индекс позиции, на которую добавляется массив</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Clear(System.Boolean)">
            <summary>Обнуляет объект</summary>
            <param name="fast">fast = <see langword="false"/> - обнуляет все байты сохранённые в массиве и очищает память, выделенную под эти объекты</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.getBytes(System.IntPtr,cryptoprime.BytesBuilderForPointers.Record,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface)">
            <summary>Создаёт массив байтов, включающий в себя все сохранённые массивы. Ничего не удаляет и не очищает</summary>
            <param name="resultCount">Размер массива-результата (если нужны все байты resultCount = -1)</param>
            <param name="resultA">Массив, в который будет записан результат. Если resultA = null, то массив создаётся</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования</param>
            <returns>Массив байтов результата, длиной resultCount. Если установлен resultA, то возврат совпадает с этим массивом</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.CloneBytes(System.Byte*,System.IntPtr,System.IntPtr,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.String)">
            <summary>Клонирует массив, начиная с элемента start, до элемента с индексом PostEnd (не включая его)</summary><param name="b">Массив для копирования</param>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Элемент, расположенный после последнего элемента для копирования</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования. Не может быть null</param>
            <param name="RecordName">Имя новой записи, для отладки</param>
            <returns>Новый массив, являющийся копией массива b[start .. PostEnd - 1]</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.CloneBytes(cryptoprime.BytesBuilderForPointers.Record,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.IntPtr,System.IntPtr,System.String)">
            <summary>Клонирует массив, начиная с элемента start, до элемента с индексом PostEnd (не включая его)</summary>
            <param name="rec">Массив для копирования</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования. Может быть null, в таком случае аллокатор получается из rec</param>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Элемент, расположенный после последнего элемента для копирования</param>
            <param name="RecordName">Имя новой записи, для отладки</param>
            <returns>Новый массив, являющийся копией массива rec[start .. PostEnd - 1]</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.CloneBytes(System.Byte[],cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.IntPtr,System.IntPtr,System.String)">
            <summary>Клонирует массив, начиная с элемента start, до элемента с индексом PostEnd (не включая его)</summary>
            <param name="b">Массив для копирования</param>
            <param name="allocator">Аллокатор для выделения памяти для копирования. Не может быть null</param>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Элемент, расположенный после последнего элемента для копирования</param>
            <param name="RecordName">Имя новой записи, для отладки</param>
            <returns>Новый массив, являющийся копией массива b[start .. PostEnd - 1]</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.RemoveBlockAt(System.Int32,System.Boolean)">
            <summary>Удаляет блок из объекта с позиции position, блок очищается нулями. <para>Эта функция служебная, скорее всего, вам не надо её вызывать</para></summary>
            <returns>Возвращает длину удалённого блока</returns>
            <param name="position">Индекс удаляемого блока</param>
            <param name="doClear">Если true, то удалённый блок очищается нулями и память, выделенная под него, освобождается ( всё это делается вызовом Record.Dispose() )</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.getBytesAndRemoveIt(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr)">
            <summary>Создаёт массив байтов, включающий в себя result.len символов, и удаляет их с очисткой из BytesBuilder</summary>
            <param name="result">Массив, в который будет записан результат. Уже должен быть выделен. result != <see langword="null"/>. Количество байтов устанавливается длиной массива. <para>Если Result.allocator, то может быть ситуация разыменования <see langword="null"/>, если нет allocator у записей, которые были добавлены в буфер</para></param>
            <param name="resultLen">Длина результата. Если -1, то длина берётся из result.len</param>
            <returns>Запрошенный результат (первые result.len байтов). Этот возвращаемый результат равен параметру result</returns>
            <remarks>Эта функция может неожиданно обнулить часть внешнего массива, сохранённого без копирования (если он где-то используется в другом месте). Проверьте, что в функции add было копирование или все массивы, переданные в данную коллекцию более не используются</remarks>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.BytesToULong(System.UInt64@,System.Byte*,System.IntPtr,System.IntPtr)">
            <summary>Получает 8-мибайтовое целое число из массива. Младший байт по младшему индексу</summary>
            <param name="data">Полученное число</param>
            <param name="target">Массив с числом</param>
            <param name="start">Начальный элемент, по которому расположено число</param>
            <param name="length">Полная длина массива, до конца должно оставаться не менее 8-ми байтов</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.System#IDisposable#Dispose">
            <summary>Удаляет объект, вызывая Clear</summary>
        </member>
        <member name="T:cryptoprime.BytesBuilderForPointers.Record">
            <summary>Класс-обёртка для массивов, доступных по указателю</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.array">
            <summary>Массив с данными</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.len">
            <summary>Длина массива с данными</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.handle">
            <summary>Данные для удаления, если этот массив выделен с помощью Fixed_AllocatorForUnsafeMemory</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.ptr">
            <summary>Данные для удаления, если этот массив выделен с помощью AllocHGlobal_AllocatorForUnsafeMemory</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.allocator">
            <summary>Аллокатор, используемый для освобождения памяти в Dispose</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.Name">
            <summary>Имя записи. Используется в отладочных целях.</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.#ctor(System.String)">
            <summary>Этот метод вызывать не надо (если только вы не хотите сделать обёртку под уже выделенную память). Используйте AllocatorForUnsafeMemoryInterface.AllocMemory</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.getRecordFromBytesArray(System.Byte[],cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.String)">
            <summary>Создать запись и скопировать туда содержимое массива байтов</summary>
            <param name="allocator">Аллокатор памяти, который предоставит выделение памяти посредством вызова AllocMemory</param>
            <param name="sourceArray"></param>
            <param name="RecordDebugName">Идентификатор записи, для отладки удаления памяти</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.ToString">
            <summary>Выводит строковое представление для отладки в формате "{длина}; элемент элемент элемент"</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.ToString(System.Int32,System.Int32)">
            <summary>Выводит строковое представление для отладки в формате "{длина}\n элемент элемент элемент"</summary>
            <param name="maxLen">Максимальное количество элементов массива для вывода в строку</param>
            <param name="maxStrLen">Максимальная длина строки для вывода результата</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Clone">
            <summary>Клонирует запись. Данные внутри записи копируются</summary>
            <returns>Возвращает полностью скопированный массив, независимый от исходного</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Clone(System.String)">
            <summary>Клонирует запись. Данные внутри записи копируются</summary>
            <param name="RecordName">Имя записи, для отладки</param>
            <returns>Возвращает полностью скопированный массив, независимый от исходного</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Clone(System.IntPtr,System.IntPtr,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface,System.Boolean,System.String)">
            <summary>Клонирует запись. Данные внутри записи копируются из диапазона [start .. PostEnd - 1]</summary>
            <param name="start">Начальный элемент для копирования</param>
            <param name="PostEnd">Первый элемент, который не надо копировать</param>
            <param name="allocator">Аллокатор для выделения памяти, может быть <see langword="null"/>, если у this установлен аллокатор</param>
            <param name="destroyRecord">Удалить запись this после того, как она будет склонирована</param>
            <param name="RecordName">Имя записи, для отладки</param>
            <returns>Возвращает новую запись, являющуюся независимой копией старой записи</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.NoCopyClone(System.IntPtr,System.IntPtr,System.String)">
            <summary>Копирует запись, но без копированя массива и без возможности его освободить. Массив должен быть освобождён в оригинальной записи только после того, как будет закончено использование копии (если это будет не так, возникнет исключение)</summary>
            <param name="len">Длина массива либо 0, если длина массива от shift до конца исходного массива, либо иное значение не более this.len. Отрицательное значение будет интерпретировано как исключение определённой длины из массива, дополнительно к shift (newLen = this.len - shift + len)</param>
            <param name="shift">Сдвиг начала массива относительно исходной записи</param>
            <param name="RecordName">Имя записи, для отладки</param>
            <returns>Новая запись, указывающая на тот же самый массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.CloneToSafeBytes(System.IntPtr,System.IntPtr,System.Boolean)">
            <summary>Копирует содержимое объекта в безопасный массив байтов</summary>
            <param name="start">Начальный индекс источника, с которого нужно копировать байты</param>
            <param name="PostEnd">Индекс первого байта, который уже не нужно копировать</param>
            <param name="destroyRecord">Если true, то this будет уничтожена после этого метода</param>
            <returns>Результирующий массив байтов</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Clear">
            <summary>Очищает выделенную область памяти (пригодно для последующего использования). Для освобождения памяти используйте Dispose()</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.isDisposed">
            <summary>Если true, то объект уже уничтожен</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.inLinks">
            <summary>Количество входящих ссылок, полученные NoCopyClone и т.п.
            <para>Синхронизация осуществляется при помощи lock (inLinks) либо при помощи класса AllocHGlobal_NoCopy</para></summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Dispose">
            <summary>Очищает и освобождает выделенную область памяти</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Free">
            <summary>Вызывает Dispose(true)</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderForPointers.Record.errorsInDispose">
            <summary>Если true, то была ошибка либо в деструкторе Record, либо Record.Dispose, либо в других классах, которые используют флаги "doException...". Это может быть только установлено, но не сброшено. Данный флаг используется и в других классах для того, чтобы показать аналогичные ошибки в Dispose</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Dispose(System.Boolean)">
            <summary>Очищает массив и освобождает выделенную под него память</summary>
            <param name="disposing">true, если вызов происходит из-вне деструктора</param>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.doExceptionOnDisposeInDestructor">
            <summary>Если true, то в деструкторе могут быть сгенерированны исключения, если объект не был освобождён ранее. В противном случае, будет только установлен флаг errorsInDispose</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.Record.doExceptionOnDisposeTwiced">
            <summary>Если true, то может быть вызвано исключение при повторном вызове Dispose. В противном случае, будет только установлен флаг errorsInDispose</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.Finalize">
            <summary>Деструктор. Выполняет очистку памяти, если она ещё не была вызвана (с исключением)</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.Span{System.Byte}">
            <summary>Возвращает ссылку на Span, которая представляет содержимое данной записи</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.ReadOnlySpan{System.Byte}">
            <summary>Возвращает ссылку на ReadOnlySpan, которая представляет содержимое данной записи</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.Void*">
            <summary>Возвращает ссылку на массив</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.Byte*">
            <summary>Возвращает ссылку на массив</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.UInt16*">
            <summary>Возвращает ссылку на массив, преобразованную в тип ushort * </summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_Implicit(cryptoprime.BytesBuilderForPointers.Record)~System.UInt64*">
            <summary>Возвращает ссылку на массив, преобразованную в тип unint * </summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_RightShift(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr)">
            <summary>Смещает начало записи на len. Например, r &gt;&gt; 128 возвращает запись res: res.array=r.array+128, res.len=r.len-128</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_LeftShift(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr)">
            <summary>Уменьшает длину записи на subtracted. Например, r &lt;&lt; 128 возвращает запись res: res.array=r.array, res.len=r.len-128</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.op_BitwiseAnd(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr)">
            <summary>Смещает запись за конец старой записи, новая запись длиной len. var r = a &amp; Len возвратит запись r, длиной Len, начинающуюся после конца записи a. То есть r.array = a.array + a.len, r.len = Len</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.UnsecureCompare(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Сравнивает две записи</summary>
            <param name="b">Вторая запись для сравнения</param>
            <returns>true, если значения массивов в записях равны</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.UnsecureCompare(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr,System.IntPtr)">
            <summary>Сравнивает две записи</summary>
            <param name="b">Вторая запись для сравнения. Если размеры записей разные, то в b нужно передавать большую запись (т.к. иначе размеры записей не совпадут)</param>
            <param name="start">Самый первый элемент для сравнения в массиве b</param>
            <param name="postEnd">Элемент, идущий после последнего элемента для сравнения. 0 == b.len. Отрицательное значение равно b.len+postEnd</param>
            <returns>true, если значения массивов в записях равны</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Record.checkRange(System.IntPtr,System.IntPtr)">
            <summary>Проверяет, что индексы start и end лежат внутри массива. start &lt;= end. Если условия не выполнены, то генерируется исключение.</summary>
            <param name="start">Индекс для проверки в границах массива</param>
            <param name="end">Индекс для проверки в границах массива</param>
        </member>
        <member name="T:cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface">
            <summary>Интерфейс описывает способ выделения памяти. Реализация: AllocHGlobal_AllocatorForUnsafeMemory</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface.AllocMemory(System.IntPtr,System.String)">
            <summary>Выделяет память. Память может быть непроинициализированной</summary>
            <param name="len">Размер выделяемого блока памяти</param>
            <param name="RecordName">Имя записи: для отладочных целей</param>
            <returns>Описатель выделенного участка памяти, включая способ удаления памяти</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface.FreeMemory(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Освобождает выделенную область памяти. Не очищает память (не перезабивает её нулями). Должен вызываться автоматически в Record</summary>
            <param name="recordToFree">Память к освобождению</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface.FixMemory(System.Byte[])">
            <summary>Производит фиксацию в памяти массива (интерфейс должен реализовывать либо AllocMemory(nint), либо этот метод, либо оба)</summary>
            <param name="array">Исходный массив</param>
            <returns>Зафиксированный массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface.FixMemory(System.Object,System.IntPtr)">
            <summary>Производит фиксацию в памяти объекта, длиной length байтов</summary>
            <param name="array">Закрепляемый объект</param>
            <param name="length">Длина объекта в байтах. Длины массивов необходимо домножать на размер элемента массива</param>
            <returns></returns>
        </member>
        <member name="T:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory">
            <summary>Выделяет память с помощью Marshal.AllocHGlobal</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.InterlockedIncrement_memAllocated">
            <summary>Аналог Interlocked.Increment для nint (в классе Interlocked его нет). Выполняет приращение val на единицу</summary>
            <returns>Оригинальное (не изменённое) значение переменной</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.InterlockedDecrement_memAllocated">
            <summary>Аналог Interlocked.Increment для nint (в классе Interlocked его нет). Выполняет приращение val на единицу</summary>
            <returns>Оригинальное (не изменённое) значение переменной</returns>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.alignmentDegree">
            <summary>Показатель степени значения выравнивания памяти</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.ControlPaddingSize">
            <summary>Размер отступов контрольных значений. И левый, и правый отступы имеют одни и те же значения</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.AllocMemory(System.IntPtr,System.String)">
            <summary>Выделяет память. Память может быть непроинициализированной</summary>
            <param name="len">Длина выделяемого участка памяти</param>
            <param name="RecordName">Имя структуры. Для отладки, может быть null.</param>
            <returns>Описатель выделенного участка памяти, включая способ удаления памяти</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.FreeMemory(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Освобождает выделенную область памяти. Не очищает память (не перезабивает её нулями)</summary>
            <param name="recordToFree">Память к освобождению</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.FixMemory(System.Byte[])">
            <summary>Не реализовано</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.AllocHGlobal_AllocatorForUnsafeMemory.FixMemory(System.Object,System.IntPtr)">
            <summary>Не реализовано</summary>
        </member>
        <member name="T:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory">
            <summary>Выделяет память для массива с помощью его фиксации: то есть используется обычный сборщик мусора и GCHandle.Alloc</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory.AllocMemory(System.IntPtr,System.String)">
            <summary>Выделяет память с помощью сборщика мусора, а потом фиксирует её. Это работает медленнее раза в 3, чем AllocHGlobal_AllocatorForUnsafeMemory</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory.FreeMemory(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Освобождает выделенную область памяти. Не очищает память (не перезабивает её нулями)</summary>
            <param name="recordToFree">Память к освобождению</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory.FixMemory(System.Byte[])">
            <summary>Производит фиксацию в памяти массива</summary>
            <param name="array">Исходный массив</param>
            <returns>Зафиксированный массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory.FixMemory(System.UInt16[])">
            <summary>Производит фиксацию в памяти массива</summary>
            <param name="array">Исходный массив</param>
            <returns>Зафиксированный массив</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderForPointers.Fixed_AllocatorForUnsafeMemory.FixMemory(System.Object,System.IntPtr)">
            <summary>Производит фиксацию в памяти массива</summary>
            <param name="array">Исходный массив</param>
            <param name="length">Длина массива</param>
            <returns>Зафиксированный массив</returns>
        </member>
        <member name="T:cryptoprime.BytesBuilderStatic">
            <summary>
            BytesBuilderStatic
            BytesBuilderForPointers, реализованный с циклическим буфером
            Класс позволяет собирать большой блок байтов из более мелких
            Класс непотокобезопасный (при его использовании необходимо синхронизировать доступ к классу вручную как на чтение, если при нём возможна запись, так и на запись)
            </summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.size">
            <summary>Размер циклического буфера. Это максимальный размер хранимых данных. Изменяется функцией Resize</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.allocator">
            <summary>Аллокатор для выделения памяти</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.MIN_SIZE">
            <summary>Минимально возможный размер циклического буфера</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.Resize(System.IntPtr)">
            <summary>Изменяет размер циклического буфера без потери данных.<para>При многопоточных вызовах синхронизация остаётся на пользователе.</para></summary>
            <param name="Size">Новый размер</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.ReadBytesTo(System.Byte*,System.IntPtr)">
            <summary>Прочитать count байтов из циклического буфера в массив target, не удаляя прочитанные значения</summary>
            <param name="target">Целевой массив, куда копируются значения</param>
            <param name="count">Количество байтов для копирования. Если меньше нуля, то копируются все байты</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.WriteBytes(System.Byte*,System.IntPtr)">
            <summary>Записывает байты в циклический буфер (добавляет байты в конец)</summary>
            <param name="source">Источник, из которого берутся данные.
            <para>Если передаётся Record, убедитесь, что не передаётся что-то типа "record + 16" - это будет неверное приведение типов; верное приведение типов "record.array+16"</para></param>
            <param name="countToWrite">Количество байтов для добавления</param>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.bytes">
            <summary>Адрес циклического буфера == region.array</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.after">
            <summary>Поле, указывающее на первый байт после конца региона памяти буфера. Он не меняется при добавлении или удалении данных. Только при изменении размера циклического буфера</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.region">
            <summary>Обёртка для циклического буфера</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.count">
            <summary>Количество всех сохранённых байтов в этом объекте - сырое поле для корректировки значений</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderStatic.Count">
            <summary>Количество всех сохранённых байтов в этом объекте</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.Start">
            <summary>End - это индекс следующего добавляемого байта. Для Start = 0 поле End должно быть равно размеру сохранённых данных (End == Count); при полном заполнении буфера End = 0</summary>
        </member>
        <member name="F:cryptoprime.BytesBuilderStatic.End">
            <summary>End - это индекс следующего добавляемого байта. Для Start = 0 поле End должно быть равно размеру сохранённых данных (End == Count); при полном заполнении буфера End = 0</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderStatic.Item(System.IntPtr)">
            <summary>Получает адрес элемента с индексом index (с учётом смещения первого элемента буфера)</summary>
            <param name="index">Индекс получаемого элемента</param>
            <returns>Адрес элемента массива</returns>
        </member>
        <member name="P:cryptoprime.BytesBuilderStatic.len1">
            <summary>Длина данных, приходящихся на правый (первый) сегмент данных</summary>
        </member>
        <member name="P:cryptoprime.BytesBuilderStatic.len2">
            <summary>Длина данных, приходящихся на левый сегмент данных</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.add(System.Byte*,System.IntPtr)">
            <summary>Добавляет блок в буфер</summary><param name="bytesToAdded">Добавляемый блок данных. Содержимое копируется</param><param name="len">Длина добавляемого блока данных</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.add(cryptoprime.BytesBuilderForPointers.Record)">
            <summary>Добавляет массив в сохранённые значения</summary>
            <param name="rec">Добавляемый массив (копируется)</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.Clear(System.Boolean)">
            <summary>Очищает циклический буфер</summary>
            <param name="fast">fast = <see langword="false"/> - обнуляет выделенный под регион массив памяти</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.isEntireNull">
            <summary>Этот метод для тестов: показывает, что все значения внутреннего буфера равны нулю; проверяет все байты вне зависимости от значения count</summary>
            <returns>true, если все значения внутреннего буфера равны нулю</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.getBytes(System.IntPtr,cryptoprime.BytesBuilderForPointers.Record,cryptoprime.BytesBuilderForPointers.AllocatorForUnsafeMemoryInterface)">
            <summary>Создаёт массив байтов, включающий в себя все сохранённые массивы</summary>
            <param name="resultCount">Размер массива-результата (если нужны все байты resultCount = -1)</param>
            <param name="resultA">Массив, в который будет записан результат. Если resultA = null, то массив создаётся</param>
            <param name="allocator">Аллокатор, который позволяет функции выделять память, если resultA == null. Если null, используется this.allocator</param>
            <returns></returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.RemoveBytes(System.IntPtr)">
            <summary>Удаляет байты из начала массива</summary>
            <param name="len">Количество байтов к удалению</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.getBytesAndRemoveIt(cryptoprime.BytesBuilderForPointers.Record,System.IntPtr)">
            <summary>Создаёт массив байтов, включающий в себя count байтов из буфера, и удаляет их с очисткой</summary>
            <param name="result">Массив, в который будет записан результат. Уже должен быть выделен. result != <see langword="null"/>.</param>
            <param name="count">Длина запрашиваемых данных</param>
            <returns>Массив result</returns>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.getBytesAndRemoveIt(System.Byte*,System.IntPtr)">
            <summary>Создаёт массив байтов, включающий в себя count байтов из буфера, и удаляет их с очисткой</summary>
            <param name="result">Массив, в который будет записан результат. Уже должен быть выделен. result != <see langword="null"/>.</param>
            <param name="count">Длина запрашиваемых данных</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.Dispose(System.Boolean)">
            <summary>Очищает и освобождает всю небезопасно выделенную под объект память</summary>
            <param name="disposing">Всегда true, кроме вызова из деструктора</param>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.Dispose">
            <summary>Очищает и освобождает всю небезопасно выделенную под объект память</summary>
        </member>
        <member name="M:cryptoprime.BytesBuilderStatic.Finalize">
            <summary>Деструктор</summary>
        </member>
        <member name="F:cryptoprime.threefish_slowly.Nw">
            <summary>Длина ключа в словах по 8-мь байтов</summary>
        </member>
        <member name="F:cryptoprime.threefish_slowly.keyLen">
            <summary>Длина ключа в байтах</summary>
        </member>
        <member name="F:cryptoprime.threefish_slowly.twLen">
            <summary>Длина tweak в байтах</summary>
        </member>
        <member name="T:VinKekFish_Utils.Memory">
            <summary>
            Не использовать напрямую. Использовать AllocHGlobal_AllocatorForUnsafeMemory
            Класс описывает аллокаторы для выделения неуправляемой памяти.
            Memory.alloc является текущим установленным аллокатором
            Memory.free  - освобождает память
            </summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.PAGE_SIZE">
            <summary>Размер страницы оперативной памяти</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MMAPS_Flags.MAP_PRIVATE">
            <summary>Этот флаг указывается всегда, если это не shared-память</summary>
        </member>
        <member name="T:VinKekFish_Utils.Memory.MemoryLockType">
            <summary>
            Этот класс описывает, какой аллокатор используется сейчас для выделения памяти
            </summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.UNINIT">
            <summary>Непроинициализированный экземпляр класса</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.unknown">
            <summary>Неопределённый тип аллокатора. Вызвать Memory.Init()</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.errore">
            <summary>Ошибка при определении аллокатора: выделение памяти запрещено</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.incorrect">
            <summary>Некорректный аллокатор, но к работе разрешён</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.correct">
            <summary>Корректный аллокатор. Должен фиксировать в оперативной памяти страницы и выделять выравненные значения (хотя значения выравненные, аллокатор внутри Record может вставлять дополнительные контрольные поля, сбивающие выравнивание)</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.MemoryLockType.linux">
            <summary>Используется аллокатор из libc (mmap)</summary>
        </member>
        <member name="P:VinKekFish_Utils.Memory.alloc">
            <summary>Выделяет память. Это текущий абстрагированный аллокатор. Если выделение памяти не прошло успешно, вызывает OutOfMemoryException</summary>
        </member>
        <member name="P:VinKekFish_Utils.Memory.free">
            <summary>Освобождает память, выделенную до этого alloc</summary>
        </member>
        <member name="F:VinKekFish_Utils.Memory.allocatedRegions">
            <summary>Представляет выделенные mmap фрагменты памяти: &lt;Пользовательский указатель, Пользовательская длина&gt;</summary>
        </member>
        <member name="M:VinKekFish_Utils.Memory.AllocMMap(System.IntPtr)">
            <summary>
            Выделяет память через mmap (импорт из libc.so.6; Linux). Память ограничивается дополнительными защищёнными от чтения и записи страницами слева и справа. Память помечается как невыгружаемая в файл подкачки
            </summary>
            <param name="len">Размер выделяемого пространства памяти</param>
            <returns>Указатель на выделенное пространство. Если неуспех, то OutOfMemoryException. Если mprotect не сработал, то Exception</returns>
        </member>
        <member name="M:VinKekFish_Utils.Memory.formatException(System.Exception)">
            <summary>Возвращает строковое представление исключения, вместе с вложенными исключениями.</summary>
            <param name="ex">Исключение</param>
        </member>
        <member name="M:VinKekFish_Utils.Memory.DeallocateAtBreakage">
            <summary>Это - функция аварийной очистки памяти. Если в конце программы allocatedMemory != 0, то можно вызвать эту функцию, сообщив пользователю об ошибке (и очистив всю память; в том числе, память перезаписывается нулями).</summary>
        </member>
        <member name="M:VinKekFish_Utils.Memory.mmap(System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Выделяет оперативную память, как описано в man mmap
            </summary>
            <param name="addr">Запрашиваемый адрес. 0 - если адрес будет выделять операционная система</param>
            <param name="length">Длина запрашиваемого пространства (строго больше нуля, выравнивание не требуется)</param>
            <param name="protection">Что можно делать с памятью. MemoryProtectionType.rw означает, что данную память можно читать и писать</param>
            <param name="flags">Флаги. MMAPS_Flags</param>
            <param name="fd"></param>
            <param name="offset"></param>
            <returns>В случае неудачи возвращает -1. В случае удачи возвращает адрес выделенного места в памяти</returns>
        </member>
        <member name="M:VinKekFish_Utils.Memory.munmap(System.IntPtr,System.IntPtr)">
            <summary>
            Освобождает выделенные страницы оперативной памяти
            </summary>
            <param name="addr">Адрес, полученный из mmap</param>
            <param name="lenght">Длина участка памяти</param>
            <returns>В случае успеха возвращает 0</returns>
        </member>
    </members>
</doc>
