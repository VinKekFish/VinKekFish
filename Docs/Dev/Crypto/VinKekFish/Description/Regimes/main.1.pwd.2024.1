Главный режим зашифрования ключа без скрытых потоков

Концепция.
1. Каскадная губка: обратная связь с хешем. Размер хеша используется для дополнительного выравнивания информации. Данные шифруются в режиме зашифрования ключа.
2. Гаммирование (VinKekFish + каскадная губка). Для убыстрения шифрования, здесь гамма берётся в режиме шифрования обычной информации.
3. Реверсирование (побайтовое).
4. Каскадная губка: обратная связь без хеша.
5. Перемешивание.
6. VinKekFish с обратной связью и хешем. Данные шифруются в режиме зашифрования ключа (с уменьшенным блоком).
7. Реверсирование.
8. VinKekFish: обратная связь без хеширования.
9. Перемешивание.


Параметр алгоритма:
p0. VinKekFish (из всех пунктов) может быть проинициализирован с разным количеством случайных таблиц перестановок (p0p) и разным количеством шагов (p0s).


Описание:

0. Файл содержит заголовок, загаммированный специальным несекретным блоком. Блок является частью синхропосылки. Описание заголовка в "ФорматПервичногоФайла".

1.
1.1. Генерация каскадной губки. Ввод ключа, длиной klen0=tall*wide*64*2+wide*Threefish_slowly.keyLen байтов [Key0Csc] (wide*Threefish_slowly.keyLen байтов - ключ для первичной инициализации ThreeFish, который не вводится в губку, а служит только для инициализации ключей ThreeFish) с количеством холостых ходов, равных режиму генерации ключа. Ключ равен по размеру сумме размеров внутренних состояний губок и должен их полностью проинциализировать с запасом.
При зашифровании перед открытым текстом добавляется поле dataForEncryptLen типа Variable ulong, которое указывает на длину шифруемого открытого текста. Далее шифрование идёт как открытого текста, так и его длины.
1.2. Гаммирование с обратной связью. Первый блок в режиме 1, последующие в режиме 0.
Длина блока во всём шаге (включая хеш) - sponge.maxDataLen >> 1 (половина от возможного блока).
1.3. Смена логического режима шифрования. Вычисление хеша в режиме 3 и его запись в файл, хеш имеет минимальную длину CscHashLen=tall*wide*64*2 байта. Хеш должен выравнять файл на границу 65536 байтов. Однако, так как у нас ещё будет один хеш, то этот хеш выравнивает блок на меньшую границу, чем 65536 так, чтобы файл бы выравнен в итоге на 65536 (выравнивание может быть настроено пользователем на другие величины).
Хеш не может быть меньше, чем tall*wide*64*2 байта.

2.
Гаммирование происходит арифметической суммой двух губок (два больших числа складываются и получается одно число - гамма). Хеш не вычисляется. Губки имеют стандартный (самый большой) размер блоков (в отличие от предыдущего).
Ключи длиной tall*wide*64*2+wide*Threefish_slowly.keyLen и 4*512*K байтов [Key1Vkf, Key1Csc]. Часть ключа wide*Threefish_slowly.keyLen не вводится в губку (инициализация ThreeFish).
Инициализация таблиц перестановок для VinKekFish осуществляется с помощью этой же каскадной губки перед основным проходом шифрования.

Вычисление таблиц перестановок VinKekFish идёт проинициализированной каскадной губкой (один шаг на одну генерацию массива для случайных перестановок - без настроек).

3. Порядок байтов во всём файле (кроме заголовка) изменяется на противоположный (побайтово).

4. Работа каскадной губки с обратной связью. [Key4Csc, Key4Csc_init] Хеша нет, остальное аналогично пункту 1.

5. Перемешивание. [Key5Csc, Key5Csc_init]. Побайтовое перемешивание с помощью губку. DoRandomPermutationForBytes
Перемешивание происходит всего файла целиком, включая хеши. Ключ длиной tall*wide*KeccakPrime.BlockLen*2 и wide*Threefish_slowly.keyLen.
Эта же губка [sponge5] используется для инициализации последующих алгоритмов VinKekFish (их таблиц перестановок).

6. Работает VinKekFish с обратной связью. Ключ длиной klen2=4*512*K байтов [Key2Vkf]. Хеш длиной VkfHashLen=3*512*K. Эта длина позволяет использовать всю стойкость VinKekFish, а не только номинальную, и, при этом, позволяет избежать коллизионных атак, также задействовав почти всю стойкость VinKekFish. Хеш, разумеется, вычисляется в другом режиме шифрования.
VinKekFish работает в режиме генерации ключа шифрования (с уменьшенным блоком).

7. Реверсирование.

8. Обратая связь без хеширования. Работает аналогично пункту 6.

9. Перемешивание. Аналогично пункту 5.
